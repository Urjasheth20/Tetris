#include <iostream>
#include <vector>
#include <conio.h>
#include <windows.h>
#include <ctime>
#include <memory>

using namespace std;

const int WIDTH = 10;
const int HEIGHT = 20;

class Tetromino {
public:
    vector<vector<int>> shape;
    int x, y;
    int color;

    Tetromino(vector<vector<int>> s, int c) : shape(s), x(WIDTH / 2 - 2), y(0), color(c) {}

    vector<vector<int>> getRotatedShape() {
        int rows = shape.size();
        int cols = shape[0].size();
        vector<vector<int>> rotated(cols, vector<int>(rows, 0));

        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                rotated[j][rows - 1 - i] = shape[i][j];

        return rotated;
    }
};

// Define Tetromino Shapes (Fixed with correct rotation behavior)
vector<Tetromino> tetrominoes = {
    Tetromino({{1, 1, 1, 1}}, 9),  // I-piece
    Tetromino({{1, 1}, {1, 1}}, 14),  // O-piece (does not rotate)
    Tetromino({{0, 1, 0}, {1, 1, 1}}, 10),  // T-piece
    Tetromino({{0, 1, 1}, {1, 1, 0}}, 12),  // Z-piece
    Tetromino({{1, 1, 0}, {0, 1, 1}}, 11),  // S-piece
    Tetromino({{1, 0, 0}, {1, 1, 1}}, 13),  // L-piece
    Tetromino({{0, 0, 1}, {1, 1, 1}}, 6)   // J-piece
};

class Tetris {
private:
    vector<vector<int>> grid;
    unique_ptr<Tetromino> currentPiece;
    int score;
    bool gameOver;
    int level;
    int speed;

    void setConsoleColor(int color) {
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
    }

public:
    Tetris() : score(0), gameOver(false), level(1), speed(500) {
        grid = vector<vector<int>>(HEIGHT, vector<int>(WIDTH, 0));
        spawnPiece();
    }

    void spawnPiece() {
        currentPiece = make_unique<Tetromino>(tetrominoes[rand() % tetrominoes.size()]);
        if (checkCollision(currentPiece->x, currentPiece->y, currentPiece->shape))
            gameOver = true;
    }

    bool checkCollision(int x, int y, vector<vector<int>> shape) {
        for (int i = 0; i < shape.size(); i++) {
            for (int j = 0; j < shape[i].size(); j++) {
                if (shape[i][j] && (x + j < 0 || x + j >= WIDTH || y + i >= HEIGHT || grid[y + i][x + j])) {
                    return true;
                }
            }
        }
        return false;
    }

    void mergePiece() {
        for (int i = 0; i < currentPiece->shape.size(); i++) {
            for (int j = 0; j < currentPiece->shape[i].size(); j++) {
                if (currentPiece->shape[i][j])
                    grid[currentPiece->y + i][currentPiece->x + j] = currentPiece->color;
            }
        }
    }

    void clearLines() {
        for (int i = HEIGHT - 1; i >= 0; i--) {
            bool full = true;
            for (int j = 0; j < WIDTH; j++) {
                if (!grid[i][j]) {
                    full = false;
                    break;
                }
            }
            if (full) {
                grid.erase(grid.begin() + i);
                grid.insert(grid.begin(), vector<int>(WIDTH, 0));
                score += 100;
                if (score % 500 == 0) speed = max(50, speed - 50);
            }
        }
    }

    void move(int dx, int dy) {
        if (!checkCollision(currentPiece->x + dx, currentPiece->y + dy, currentPiece->shape)) {
            currentPiece->x += dx;
            currentPiece->y += dy;
        } else if (dy > 0) {
            mergePiece();
            clearLines();
            spawnPiece();
        }
    }

    // *Fixed Rotation with Wall Kick*
    void rotatePiece() {
        vector<vector<int>> rotated = currentPiece->getRotatedShape();

        // Check if rotation is possible
        if (!checkCollision(currentPiece->x, currentPiece->y, rotated)) {
            currentPiece->shape = rotated;
            return;
        }

        // *Wall Kick Logic* - Try shifting left or right
        for (int shift : {-1, 1, -2, 2}) {
            if (!checkCollision(currentPiece->x + shift, currentPiece->y, rotated)) {
                currentPiece->x += shift;
                currentPiece->shape = rotated;
                return;
            }
        }
    }

    void drop() {
        while (!checkCollision(currentPiece->x, currentPiece->y + 1, currentPiece->shape))
            currentPiece->y++;
        move(0, 1);
    }

    void draw() {
        system("cls");
        vector<vector<int>> display = grid;
        for (int i = 0; i < currentPiece->shape.size(); i++) {
            for (int j = 0; j < currentPiece->shape[i].size(); j++) {
                if (currentPiece->shape[i][j])
                    display[currentPiece->y + i][currentPiece->x + j] = currentPiece->color;
            }
        }
        for (const auto& row : display) {
            for (int cell : row) {
                if (cell) {
                    setConsoleColor(cell);
                    cout << "[]";
                    setConsoleColor(7);
                } else {
                    cout << " .";
                }
            }
            cout << "\n";
        }
        cout << "Score: " << score << " Level: " << level << "\n";
    }

    void run() {
        while (!gameOver) {
            draw();

            // Handle input multiple times before the next drop
            for (int i = 0; i < speed / 50; i++) {
                if (_kbhit()) {
                    char ch = _getch();
                    switch (ch) {
                        case 75: move(-1, 0); break;  // Left Arrow
                        case 77: move(1, 0); break;   // Right Arrow
                        case 72: rotatePiece(); break; // Up Arrow (Rotate)
                        case 80: move(0, 1); break;  // Down Arrow (Soft Drop)
                        case 32: drop(); break;  // Spacebar (Hard Drop)
                        case 27: gameOver = true; break; // Escape (Exit)
                    }
                }
                Sleep(50);
            }

            move(0, 1); // Gravity effect
        }
        cout << "Game Over! Final Score: " << score << endl;
    }
};

int main() {
    srand(time(0));
    Tetris game;
    game.run();
    return 0;
}
